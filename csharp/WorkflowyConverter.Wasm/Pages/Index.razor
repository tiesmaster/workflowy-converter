@page "/"
@inject IJsApiService JsApiService
@inject ISnackbar Snackbar

<PageTitle>Workflowy Converter</PageTitle>

@if (_loadState == LoadState.SelectFile)
{
    <MudPaper @ondragenter="@SetDragClass" @ondragleave="@ClearDragClass" @ondragend="@ClearDragClass" Height="300px" Outlined="true" Class="@_dragClass">
        <InputFile OnChange="LoadWorkflowyBackupFileAsync" class="absolute mud-width-full mud-height-full overflow-hidden z-2" style="opacity:0;" />
        <MudText Typo="Typo.h6">Drag and drop a Workflowy JSON backup file or click here</MudText>
    </MudPaper>
}
else if (_loadState == LoadState.Loading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else
{
    <MudToolBar DisableGutters="true" Class="gap-4">
        <MudButton OnClick="CopyOpmlToClipboard" StartIcon="@Icons.Material.Outlined.FileCopy" Variant="Variant.Filled" Disabled="@(Opml is null)">Copy OPML to clipboard</MudButton>
        <MudButton OnClick="Clear" StartIcon="@Icons.Filled.Delete" Variant="Variant.Filled" Color="Color.Error">Clear</MudButton>
    </MudToolBar>

    <MudGrid Spacing="10" Justify="Justify.Center">
        <MudItem xs="6">
            <MudPaper Class="pa-8" Style="overflow-y: scroll; height: 80vh">
                <MudTreeView T="WorkflowyNode" @bind-SelectedValue="_selectedNode" Hover="true" Items="@(_opmlDocument!.RootNodes)">
                    <ItemTemplate>
                        <MudTreeViewItem
                            Value="@context"
                            Text="@context.Todo"
                            Items="@(context.Children?.ToHashSet())"
                            TextClass="@(context.Completed.HasValue ? "mud-error" : "")"
                            Expanded="true" />
                    </ItemTemplate>
                </MudTreeView>
            </MudPaper>
        </MudItem>
        <MudItem xs="6">
            <MudPaper Class="pa-8" Style="overflow-y: scroll; height: 80vh">
                <pre>@Opml</pre>
            </MudPaper>
        </MudItem>
    </MudGrid>
}

@code
{
    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full";
    private string _dragClass = DefaultDragClass;

    private OpmlDocument? _opmlDocument;
    private WorkflowyNode? _selectedNode;
    private LoadState _loadState;

    private async Task LoadWorkflowyBackupFileAsync(InputFileChangeEventArgs e)
    {
        _loadState = LoadState.Loading;

        try
        {
            var stream = e.File.OpenReadStream(maxAllowedSize: 2_000_000);
            _opmlDocument = await OpmlDocument.ReadFromAsync(stream);
        }
        catch (Exception ex)
        {
            Snackbar.Add($" Oeps!! {e.File.Name} is not a valid Workflowy JSON backup file", Severity.Warning);
            Console.WriteLine(ex.ToString());
        }

        _loadState = LoadState.Ready;
    }

    private async Task CopyOpmlToClipboard()
    {
        await JsApiService.CopyToClipboardAsync(Opml!);
    }

    private void Clear()
    {
        _loadState = LoadState.Loading;

        _opmlDocument = null;
        _selectedNode = null;

        _loadState = LoadState.SelectFile;

        ClearDragClass();
    }

    public string? Opml => _selectedNode?.ToOpmlDocument().ToString() ?? _opmlDocument!.ToString();

    private void SetDragClass()
    {
        _dragClass = $"{DefaultDragClass} mud-border-primary";
    }

    private void ClearDragClass()
    {
        _dragClass = DefaultDragClass;
    }
}