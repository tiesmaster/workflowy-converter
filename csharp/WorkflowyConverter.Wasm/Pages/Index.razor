@page "/"

<PageTitle>Workflowy Converter</PageTitle>

@if (_rootNodes is null)
{
    <MudPaper @ondragenter="@SetDragClass" @ondragleave="@ClearDragClass" @ondragend="@ClearDragClass" Height="300px" Outlined="true" Class="@_dragClass">
        <InputFile OnChange="UploadFilesAsync" class="absolute mud-width-full mud-height-full overflow-hidden z-2" style="opacity:0;" />
        <MudText Typo="Typo.h6">Drag and drop a Workflowy JSON backup file or click here</MudText>
    </MudPaper>
}
else
{
    <MudToolBar DisableGutters="true" Class="gap-4">
        <MudButton OnClick="Clear" Color="Color.Error" Variant="Variant.Filled" StartIcon="@Icons.Filled.Delete">Clear</MudButton>
    </MudToolBar>

    <MudGrid Spacing="10" Justify="Justify.Center">
        <MudItem xs="6">
            <MudPaper Class="pa-8">
                <MudTreeView T="WorkflowyNode" @bind-SelectedValue="_selectedNode" Hover="true" Items="@_rootNodes">
                    <ItemTemplate>
                        <MudTreeViewItem
                            Value="@context"
                            Text="@context.Todo"
                            Items="@(context.Children?.ToHashSet())"
                            TextClass="@(context.Completed.HasValue ? "mud-error" : "")"
                            Expanded="true" />
                    </ItemTemplate>
                </MudTreeView>
            </MudPaper>
        </MudItem>
        <MudItem xs="6">
            <MudPaper Class="pa-8">
                <p>@Opml</p>
            </MudPaper>
        </MudItem>
    </MudGrid>
}

@code
{
    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full";
    private string _dragClass = DefaultDragClass;

    private HashSet<WorkflowyNode>? _rootNodes;
    private WorkflowyNode? _selectedNode;

    private async Task UploadFilesAsync(InputFileChangeEventArgs e)
    {
        var stream = e.File.OpenReadStream(maxAllowedSize: 2_000_000);
        var rootNodes = await WorkflowyNode.ReadFromAsync(stream);
        _rootNodes = rootNodes.ToHashSet();
    }

    private void Clear()
    {
        _rootNodes = null;
        _selectedNode = null;
        ClearDragClass();
    }

    public string? Opml => _selectedNode?.ToOpmlDocument().ToString();

    private void SetDragClass()
    {
        _dragClass = $"{DefaultDragClass} mud-border-primary";
    }

    private void ClearDragClass()
    {
        _dragClass = DefaultDragClass;
    }
}